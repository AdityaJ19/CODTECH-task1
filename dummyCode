#include <stdio.h>
#include <string.h>

// Function to get the length of a string
int stringLength(char string[]) {
    int length = 0;
    while (string[length] != '\0') {
        length++;
    }
    return length;
}

// Function to check if one string is a substring of another
int isSubstring(char concatenated[], char string2[]) {
    int length1 = stringLength(concatenated);
    int length2 = stringLength(string2);

    // Iterate through the concatenated string
    for (int i = 0; i <= length1 - length2; i++) {
        int j = 0;

        // Check if string2 matches starting at position i
        while (j < length2 && concatenated[i + j] == string2[j]) {
            j++;
        }

        // If we found a match, return true
        if (j == length2) {
            return 1;
        }
    }

    // No match found
    return 0;
}

// Function to check if string2 is a rotation of string1
int isRotation(char string1[], char string2[]) {
    int length1 = stringLength(string1);
    int length2 = stringLength(string2);

    // If lengths are not the same, they cannot be rotations
    if (length1 != length2) {
        return 0;
    }

    // Create a concatenated string (string1 + string1)
    char concatenated[200];
    strcpy(concatenated, string1);
    strcat(concatenated, string1);

    // Check if string2 is a substring of the concatenated string
    return isSubstring(concatenated, string2);
}

int main() {
    char string1[100], string2[100];

    printf("Enter first string: ");
    scanf("%s", string1);

    printf("Enter second string: ");
    scanf("%s", string2);

    if (isRotation(string1, string2)) {
        printf("True: '%s' is a rotation of '%s'\n", string2, string1);
    } else {
        printf("False: '%s' is not a rotation of '%s'\n", string2, string1);
    }

    return 0;
}
