#include <stdio.h>
#include <string.h>

// Function to concatenate two strings
void stringConcat(char *string1, char *string2) {
    while (*string1 != '\0') {
        string1++;
    }
    while (*string2 != '\0') {
        *string1 = *string2;
        string1++;
        string2++;
    }
    *string1 = '\0';
}

// Function to find the length of a string
int stringLength(char string[]) {
    int length = 0;
    while (string[length] != '\0') {
        length++;
    }
    return length;
}

// Function to find if a substring exists in a string
int findSubstring(char string[], char subString[]) {
    int string_length = stringLength(string);
    int subString_length = stringLength(subString);

    for (int i = 0; i <= string_length - subString_length; i++) {
        int j = 0;
        while (j < subString_length && string[i + j] == subString[j]) {
            j++;
        }
        if (j == subString_length) {
            return 1; // Substring found
        }
    }
    return 0; // Substring not found
}

// Function to check if string2 is a rotation of string1
int isRotation(char string1[], char string2[]) {
    int length1 = stringLength(string1);
    int length2 = stringLength(string2);

    // If lengths are not the same, they cannot be rotations
    if (length1 != length2) {
        return 0;
    }

    // Create a new string by concatenating string1 with itself
    char concatenated[200];
    strcpy(concatenated, string1);
    stringConcat(concatenated, string1);

    // Check if string2 is a substring of the concatenated string
    return findSubstring(concatenated, string2);
}

int main() {
    char string1[100] = "abcd";
    char string2[100] = "cdab";

    if (isRotation(string1, string2)) {
        printf("True: '%s' is a rotation of '%s'\n", string2, string1);
    } else {
        printf("False: '%s' is not a rotation of '%s'\n", string2, string1);
    }

    return 0;
}
